<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

  <!-- Data Persistence -->
  <!-- If you're not using MySQL, you need to update this value to
       reflect the correct DBMS. Supported values are: oracle,
       postgres, db2, and sqlserver. -->
  <entry key="DataPersistenceEngine">@@database@@</entry>
  <!-- Connection Strings *must* be a JNDI name for a DataSource -->
  <entry key="SystemDatabaseConnectionString">jdbc/ScormEngineDB</entry>
  <!-- <entry key="TenantDatabaseConnectionString">jdbc/ScormEngineDB-tenant</entry> -->

  
  <!-- entry key="LogicIntegrationClassName">RusticiSoftware.ScormEngine.AutoTestIntegration.AutoTestIntegration</entry>
   <entry key="RedirectOnExitUrl">/courses/autotest/closer.html</entry-->
  <entry key="RedirectOnExitUrl">/ScormEngineInterface/tools/console/index.html?registrationId=${RegistrationId}</entry>
  <entry key="OAuthAuthorizePage">/ScormEngineInterface/defaultui/oauth_authorize.jsp</entry>
  <entry key="LrsAuthCallbackUrl">http://apiuser:password@localhost:8080/ScormEngineInterface/defaultui/lrs_callback.jsp</entry>
  <entry key="LrsAuthCallbackMaxCacheSize">5</entry>
  <!-- Registration Postback -->
  <!--
  <entry key="ApiRollupRegistrationPostBackUrl" >http://example.org/${TenantName}</entry>
  <entry key="ApiRollupRegistrationFormat">full</entry>
  <entry key="ApiRollupRegistrationAuthUser">user</entry>
  <entry key="ApiRollupRegistrationAuthPassword">password</entry>
  -->

  <!-- Console Options -->
  <!-- Optional simple, password-only authentication to Engine's console. If not set, console cannot be accessed. -->
  <entry key="ConsolePassword">password</entry>

  <!-- Uncomment the following lines to enable various console tasks. -->
  <!-- Allow deleting packages from console -->
  <entry key="ConsoleAllowDeletePackage">True</entry>
  <!-- Allow deleting registrations from console -->
  <entry key="ConsoleAllowDeleteRegistration">True</entry>
  <!-- Allow deleting all data from console -->
  <entry key="ConsoleAllowDeleteAllData">True</entry>
  <!-- Allow deleting all state data from console -->
  <entry key="ConsoleAllowDeleteAllState">True</entry>
  
  <entry key="ConcurrentLaunchDetectionEnabled">false</entry>
  
  <!--
    By default, Console will show the database connection string with the other configuration values.
    Uncomment the following line to prevent the connection string from being shown.
  -->
  <!-- <entry key="ConsoleShowDbConnectionString">False</entry> -->

  <!--
    A set of API accounts can be optionally specified. These should be separated by
    newlines, and must be of the form username:password

    NOTE THE SECURITY IMPLICATIONS OF PLAIN TEXT PASSWORDS IN THIS FILE. IF YOU CANNOT
    PROTECT THIS FILE, YOU MAY WISH TO SKIP THIS CONFIG ELEMENT.
  -->
  
  <entry key="ApiBasicAccounts">
    apiuser : password
  </entry>

  
  <!-- stuff added for canformance -->
<entry key="TinCanBasicAccounts">stmt-viewer : stmt-viewer-password : read-only
        root : scorm2004 : root</entry>
        

		<entry key="ApiBasicTenantAccounts">user : password
        root : scorm2004</entry>
  <entry key="xAPIFilesPath">C:/xAPIFiles/</entry>
  <entry key="TinCanFilesPath">C:/xAPIFiles/</entry>
		
<entry key="SystemHomepageUrl">http://example.org/sam/cayford/test/vm/lrs</entry>
		
  <!-- URLs -->
  <entry key="ScormEngineUrl">/ScormEngineInterface</entry>
  
  <entry key="ScormEngineScriptsUrl">/ScormEngineInterface/scripts</entry>
  <entry key="UseCompressedJavascript">True</entry> <!-- If false, appends _src to scripts URL -->

  <!-- Optional URLs:  If using central/remote setup or a non-default UI, see examples in comments at
       the bottom of this file -->

  <!-- Upload Import Control -->
  <entry key="WebPathToContentRoot">/courses/${TenantName}</entry>
  <entry key="FilePathToContentRoot">c:\tomcatwww\courses\${TenantName}</entry>
  <entry key="FilePathToUploadedZippedPackage">c:\tomcatwww\courses\${TenantName}\uploads</entry>

  <!--  Registration Instance and Package Versioning -->
  <entry key="CreateRegistrationIfNeeded">True</entry>

  <!--  REGISTRATION RESTART
		1 = "never":
		2 = "when existing registration is complete and newer package version exists"
		3 = "when newer package version exists"
		4 = "when existing registration is complete"
		5 = "when existing registration is satisfied"
		6 = "when existing registration is satisfied and newer package version exists"
  -->
  <entry key="WhenToRestartRegistration">2</entry>
  <entry key="IsPackageVersioningEnabled">true</entry>

  <!-- Optional SCORM Engine Features -->
  <!--These settings simply determine whether or not a warning message is displayed when unsupported SCORM 2004 / SSP content is imported...it does not enable or disable SCORM 2004 or SSP support-->
  <entry key="xAPIEnabled">true</entry>
  <entry key="2004Enabled">true</entry>
  <entry key="SSPEnabled">true</entry>
  <entry key="SSPSizeAllocation">1048576</entry>

  <!-- Optional Offline Settings -->
  <!-- <entry key="ScormEngineFilesystemRoot">/usr/local/tomcat/webapps/ScormEngineInterface</entry> -->

  <!-- Debug Settings -->
  <!-- Server side-->
  <entry key="KeepSoapLog">True</entry>
  <!-- Client side (default settings for new packages)-->
  <entry key="DebugControlAudit">True</entry>
  <entry key="DebugControlDetailed">True</entry>
  <entry key="DebugRteAudit">True</entry>
  <entry key="DebugRteDetailed">True</entry>
  <entry key="DebugSequencingAudit">True</entry>
  <entry key="DebugSequencingDetailed">True</entry>
  <entry key="DebugSequencingSimple">True</entry>
  <entry key="DebugLookAheadAudit">True</entry>
  <entry key="DebugLookAheadDetailed">False</entry>
  <entry key="DebugIncludeTimestamps">True</entry>

  <!-- Central / Remote Architecture-->
  <entry key="UseCrossDomainWebServices">False</entry>
  <entry key="WebServiceRetries">1</entry>
  <entry key="WebServiceRetryInterval">3000</entry>

  <!-- ScormEngineManager Web Services -->
  <entry key="UseImportWebServices">False</entry>

  <!-- Object Id Configuration-->
  <entry key="UseGuidAsObjectId">False</entry>

  <entry key="Pens_Process_Sync">True</entry>

  <!-- Default Commit Frequency
  The default frequency (in milliseconds) for which the application will check for dirty data and
  try to send it to the server, when not specified by package metadata. -->
  <!-- <entry key="DefaultCommCommitFrequency">10000</entry> -->

  <!-- Central/Remote URL Configuration
  In addition to the ScormEngineUrl, the "central" SCORM Engine instance will need the following parameter explicitly defined
  (or overridden in integration):

  <entry key="RemoteLaunchPageUrl">http://remotescorm.mycompany.com/ScormEngineInterface/defaultui/</entry>

  In addition to the ScormEngineUrl, the "remote" SCORM Engine instance will need these settings ecplicitly defined:

  <entry key="CentralAiccRequestProcessorUrl">http://centralscorm.mycompany.com/ScormEngineInterface/ProcessAiccRequest.jsp</entry>
  <entry key="CentralWebServiceUrl">http://centralscorm.mycompany.com/ScormEngineInterface/services/ScormEngineDataExchangeService</entry>
  -->

  <!--
  If you elect to use custom ui files (deliver page, etc), you will need to define this parameter explicitly, for example:

  <entry key="RemoteLaunchPageUrl">/MyWebApplication/customui/launch.jsp</entry>

  <entry key="EngineUtilsHelperUrl">http://centralscorm.mycompany.com/ScormEngineInterface/EngineUtilsHelper.jsp</entry>

  Also requires the ScormEngineScriptsUrl setting above.
  -->

  <!--
  Optional URL the application should redirect to when the learner refreshes the deliver page, which otherwise may result in a the content being
  re-launched. This can happen when the user deliberately refreshes the page, or uses the back button (except in IE where the back button just
  shows the existing page from cache and does not reload from the server, or re-run scripts)

  Re-launch is a problem if the content was not suspended, as a new attempt will be generated which will not have all the details from the prior attempt
  (the prior attempt will still be shown in history).  So even though the user may have completed the initial attempt, they may appear to be incomplete.

  This is an unusual problem, and frequently re-launching after a refresh is the best choice, so for now we only recommend assinging a value to this property
  if you have run into the problem described above.  The redirect page should minimally make it clear to the user how to get back into the
  content.
  -->
  <entry key="RedirectOnRefreshUrl"></entry>

  <!--
  Maximum string length (in characters) to allow persisting to the database.  Defaults to 2500000 if not set.
  1) As the largest strings in the system tend to be metadata, and a package can be used without its metadata, if
     a metadata string (raw metadata, description, etc) is longer than this value, that metadata will not be stored,
     and a parser warning will be generated.
  2) Any attempt to pass a string parameter longer than this length to the SCORM engine DB layer will trigger an error.
     This is because such large values may cause an error when reading them back, or cause poor performance, so
     we reject them on write instead.
  -->
  <entry key="DBMaxStringLength">2500000</entry>

  <!--
  Number of times to retry a DB transaction which encounters an error where a retry might work (such as a deadlock).
  The default value is 3.
  A value of 0 disables retries and prevents the DataHelper instance from being wrapped in DataHelperWrapper.
  -->
  <!-- <entry key="DBRetryCount">3</entry> -->

  <!--
    The SupportPackagerSendKey provides a way to limit who can send support packages to RusticiSoftware.  If left blank, anyone will be able to send
    support packages.  If a key value is specified here, then for the "send to Rustici" functionality to appear, the user must append the following
    query argument to their SupportPackager url: &config=<yourkey>
    For example: http://localhost/ScormEngineInterface/supportPackager.aspx?config=yourkey
    -->
  <entry key="SupportPackagerSendKey"></entry>

  
  <!--entry key="ApiResultLimitSinceNotSpecified">7</entry>
  <entry key="ApiResultLimit">7</entry-->
  
  <!--
      Tin Can actors are identified in traditional LMS launches using the learner's account name
      and a home page URL for the account itself. In the case of SCORM Cloud, it is http://cloud.scorm.com/
      Fill in this value with an absolute URL to the homepage of your service. -->
  <!--<entry key="SystemHomepageUrl">http://example.org/</entry>-->

  <!--
      Allow unauthenticated TCAPI access in a special public area, under /ScormEngineInterface/TCAPI/public.
      False by default.  -->

  <!--<entry key="TinCanEnablePublicEndpoint">false</entry>-->

  <!-- If enabled, actor merging in TinCan v0.9 is possible. This is considered dangerous and should be left disabled. -->
  <!--<entry key="TinCanAllowMultipleSimultaneousActorIds">False</entry>-->

  <!--
       SCORM results can be converted to TinCan statements and submitted to the ScormEngine LRS automatically.
       Valid versions are "0.95" and "1.0.0".
  -->
  <!--<entry key="ConvertTinCanVersion">1.0.0</entry>-->
  <!--<entry key="ConvertTinCanFromScormRealtime">True</entry>-->
  <!--<entry key="ConvertTinCanFromScormHistorical">True</entry>-->

  <!-- For tincan content to be accesible via the /content endpoint you should choose an option and implement the relevant integration method  -->
  <!--<entry key="TinCanContentProtectedUseAuthTokenRedirect>False</entry>-->
  <!--<entry key="TinCanContentProtectedUseBasicAuthForward>False</entry>-->
  <!--<entry key="TinCanContentProtectedUseCustomProxyAuth>False</entry>-->

  <!--
       Tin Can forwarding thread configuration elements.

       *TinCanStatementForwardEnabled - enable tin can statement forward on this server.
       *TinCanStatementForwardSleepTime - sleep time in milliseconds. Describes how frequently to wake up and poll. 1000ms * 60seconds = 60000
          to poll every minute.
       *TinCanStatementForwardMaxBackoffHours - max backoff time in hours. Describes the maximum time to wait for a retry of a failing
          forwarding path. 0 for "no maximum."
       *TinCanStatementForwardStmtBatchSize - batch size for gathering/posting statements.
       *TinCanStatementForwardWebTimeout - timeout (in milliseconds) for the http requests for gathering/posting statements
  -->
  <!--<entry key="TinCanStatementForwardEnabled">False</entry>-->
  <!--<entry key="TinCanStatementForwardSleepTime">60000</entry>-->
  <!--<entry key="TinCanStatementForwardMaxBackoffHours">24</entry>-->
  <!--<entry key="TinCanStatementForwardStmtBatchSize">500</entry>-->
  <!--<entry key="TinCanStatementForwardWebTimeout">1000</entry>-->

  <!-- TinCanDataCabinet, an asynchronous TinCan-results collating thread, enabled.
       Sleeptime is in milliseconds. 60 seconds * 1000ms = 1 minute. -->
  <!--<entry key="TinCanDataCabinetEnabled">True</entry>-->
  <!--<entry key="TinCanDataCabinetSleeptime">60000</entry>-->
  <!-- For multitenant configurations, how many minutes before checking for new tenants
       Set to "0" for single tenant configurations. -->
  <!--<entry key="TinCanDataCabinetMinimumMinutesBetweenTenantUpdates">5</entry>-->

  <!-- Recipes offer a methodology for doing relational reporting on Tin Can
       statements stored in your Engine LRS.

       First of all, a collection of well described statements can be defined
       in a Profile (see https://registry.tincanapi.com/#home/profiles for more
       information).

       Then, a listener can be created in Engine that listens for statements and
       populates relational tables associated with the listener.

       Engine currently ships with three Recipes implemented: results summary,
       interactions, and video.

       To enable Recipes, you must set TinCanDataCabinetEnabled (see above) to
       "true", and you must also have a valid JSON file for
       TinCanRecipesConfigurationFilePath. Engine includes
       ScormEngineInterface/recipes.json in its distribution by default.
  -->
  <!--<entry key="TinCanRecipesConfigurationFilePath">/usr/local/www/tomcat/webapps/ScormEngineInterface/recipes.json</entry>-->

  <!--
  A set of TCAPI accounts can be optionally specified. These should be separated by
  newlines, and must be of the form username:password:role. The roles are as follows:

      user : typical, default permissions, allowing the account to assert any statement,
              and read only those statements they have asserted or play some role in

      read-only : allowed to read all statements and state documents, but not write anything

      write-only : allowed to write any statement or TCAPI document, but not read anything

      root : allowed to read and write any statement or TCAPI document

  In order to use the StatementViewer found in Console, an account must be specified with
  type read-only. StatementViewer will use the first read-only account found.

  In order to use the Activity Provider management found in Console, an account must be
  specified with type root. The AP management will use the first root account found.

  To use one of these accounts, the same username and password must be sent over HTTP
  basic auth to the TCAPI endpoint.

  NOTE THE SECURITY IMPLICATIONS OF PLAIN TEXT PASSWORDS IN THIS FILE. IF YOU CANNOT
  PROTECT THIS FILE, YOU MAY WISH TO SKIP THIS CONFIG ELEMENT.
  -->
  <!--<entry key="xAPIBasicAccounts">
        stmt-viewer : stmt-viewer-password : read-only
        ap-mgmt : ap-mgmt-password : root
      </entry>
-->

  <!--
      When requesting authorization of restricted resources in a typical
      OAuth handshake (which is optionally part of Tin Can authorization),
      where is the authorization page?
  -->
  <!--<entry key="OAuthAuthorizePage">/ScormEngineInterface/defaultui/oauth_authorize.jsp</entry> -->

  <!--
  xAPI will use the file system for some functionality, including
  attachments. The following configuration element defines the root
  folder where xAPI files should be stored.

  If xAPIEnabled is set to "true", which it is by default, then this entry
  is required. If it is not set or has the same value as FilePathToContentRoot,
  then xAPI will not work in your Engine implementation.
  -->
  <!--<entry key="xAPIFilesPath">C:\inetpub\wwwroot\courses</entry>-->

  <!--
  When fetching hosted Tin Can metadata, what URL patterns should we exclude?
  List values must be valid regular expression patterns, and should be
  separated by either commas or newlines.
  (note: example.com and example.org are always excluded)
  -->
  <!--<entry key="TinCanHostedMetadataExcludes">
      http://example.com.*
      http://example.org.*
  </entry>-->

  <!--
  What is the max number of records to return in a statement query?
  Also used when no limit is specified, or if limit = 0
  Defaults to 500.
  -->
  <!--<entry key="TinCanMaxQueryLimit">500</entry>-->

  <!--
    When there is a reverse proxy between the browser playing content and the server where Engine resides,
    the URL parts that come to the server in the HTTP Request do not necessarily match the parts in the original request.
    (i.e. a proxy may change the target protocol, host, and/or port).  An example, can be an SSL Offloading proxy that
    simply changes the protocol from HTTP to HTTPS.
    Typically, by providing special headers, the proxy is responsible for alerting the server that the request has been proxied and
    telling it the original target of the request in the aforementioned headers.
    Sometimes, the proxy does not provide these headers, and we provide the configuration settings below to allow the customer to
    manually tell Engine what the original targets of each request are.
    These settings should only be used when a customer knows that Engine is behind a proxy, and confirms that the proxy server is not
    setting the necessary headers.

    This will contain the original value of the "Host" header field in an HTTP request (i.e. the targeted host of a request at its origin).
    As with the "Host" HTTP header, this value may come with a port # appended.
    <entry key="ForwardedHost">example.org:80</entry>

    This will contain the original value of the type of protocol used to send the request.  If the Engine server is behind an SSL Offloading proxy,
    This value will likely be HTTPS.
    <entry key="ForwardedProto">HTTPS</entry>
  -->
  <entry key="ApiUseSignedLaunchLinks">False</entry>
  <entry key="ApiTokenSecret">Secret</entry>
  
</properties>
